<?phprequire_once get_template_directory() . "/inc/extras.php";add_filter('body_class', 'hpbk_body_class');if (!function_exists('hpbk_body_class')):    /**     * @param $classes     * @return array     */    function hpbk_body_class($classes)    {        // add tên theme vào body class để tiện cho css        $current_theme_directory_name = basename(get_stylesheet_directory());        $classes[] = $current_theme_directory_name;        return $classes;    }endif;/** * @param $post_id * @param string $field * @return int|string */function hpbk_get_featured_post_category($post_id, $field = 'term_id'){    /** @var WP_Term[] $categories */    $categories = get_the_category($post_id);    if (empty($categories)) return -1;    return $categories[0]->$field;}if (!function_exists('hpbk_blade_template_exists')):    /**     * Chỉ là một phiên bản khác của View::exists     * @param $view     * @return bool     */    function hpbk_blade_template_exists($view)    {        $view = str_replace('.', '/', $view);        $search_paths = array(            get_stylesheet_directory(),            get_template_directory()        );        foreach ($search_paths as $dir) {            $path = $dir . DS . $view . BLADE_EXT;            if (file_exists($path))                return true;        }        return false;    }endif;/** * @param string $template * @param array $args * @return string */if (!function_exists('shortcode_blade_include')):    /**     * @param $template     * @param array $args     */    function shortcode_blade_include($template, $args = array())    {        hpbk_custom_blade_include($template, $args, 'shortcodes');    }endif;add_filter('post_gallery', 'hpbk_gallery_shortcode', 10, 2);add_image_size('gallery-carousel-thumbnail', 120, 80, true);add_image_size('gallery-carousel-slide', 1024, 768, true);add_filter( 'wp_calculate_image_srcset', '__return_false' );if (!function_exists('hpbk_gallery_shortcode')):    /**     * @param string $output     * @param $attr     * @return string     */    function hpbk_gallery_shortcode($output = '', $attr)    {        global $post;        static $instance = 0;        $instance++;        if (isset($attr['orderby'])) {            $attr['orderby'] = sanitize_sql_orderby($attr['orderby']);            if (!$attr['orderby'])                unset($attr['orderby']);        }        extract(shortcode_atts(array(            'order' => 'ASC',            'orderby' => 'menu_order ID',            'id' => $post->ID,            'itemtag' => 'dl',            'icontag' => 'dt',            'captiontag' => 'dd',            'columns' => 3,            'size' => 'thumbnail',            'include' => '',            'exclude' => ''        ), $attr));        /**         * @type string $order Order of the images in the gallery. Default 'ASC'. Accepts 'ASC', 'DESC'.         * @type string $orderby The field to use when ordering the images. Default 'menu_order ID'.         *                                    Accepts any valid SQL ORDERBY statement.         * @type int $id Post ID.         * @type string $itemtag HTML tag to use for each image in the gallery.         *                                    Default 'dl', or 'figure' when the theme registers HTML5 gallery support.         * @type string $icontag HTML tag to use for each image's icon.         *                                    Default 'dt', or 'div' when the theme registers HTML5 gallery support.         * @type string $captiontag HTML tag to use for each image's caption.         *                                    Default 'dd', or 'figcaption' when the theme registers HTML5 gallery support.         * @type int $columns Number of columns of images to display. Default 3.         * @type string|array $size Size of the images to display. Accepts any valid image size, or an array of width         *                                    and height values in pixels (in that order). Default 'thumbnail'.         * @type string $ids A comma-separated list of IDs of attachments to display. Default empty.         * @type string $include A comma-separated list of IDs of attachments to include. Default empty.         * @type string $exclude A comma-separated list of IDs of attachments to exclude. Default empty.         * @type string $link What to link each image to. Default empty (links to the attachment page).         *                                    Accepts 'file', 'none'.         * }         */        $id = intval($id);        $attachments = array();        if ($order == 'RAND') $orderby = 'none';        $defined_params = array(            'post_status' => 'inherit',            'post_type' => 'attachment',            'post_mime_type' => 'image',            'order' => $order,            'orderby' => $orderby        );        if (!empty($include)) {            $_attachments = get_posts(array_merge($defined_params, array(                'include' => $include            )));            /** @var WP_Post $val */            foreach ($_attachments as $key => $val) {                $attachments[$val->ID] = $val;            }        } else if (!empty($exclude)) {            $exclude = preg_replace('/[^0-9,]+/', '', $exclude);            // Setup attachments array            $attachments = get_children(array_merge($defined_params, array(                'post_parent' => $id,                'exclude' => $exclude,            )));        } else {            $attachments = get_children(array_merge($defined_params, array(                'post_parent' => $id,            )));        }        if (empty($attachments)) return '';        if (is_feed()) {            $output = "\n";            foreach ($attachments as $att_id => $attachment) $output .= wp_get_attachment_link($att_id, $size, true) . "\n";            return $output;        }        $itemtag = tag_escape($itemtag);        $captiontag = tag_escape($captiontag);        $columns = intval($columns);        $itemwidth = $columns > 0 ? floor(100 / $columns) : 100;        $float = is_rtl() ? 'right' : 'left';        $selector = "gallery-{$instance}";        // Filter gallery CSS        shortcode_blade_include('gallery.blade.php', array(            'attachments' => $attachments,            'id' => $id,            'selector' => $selector        ));        return "<!-- end of custom shortcode -->";    }endif;add_filter('post_class', 'hpbk_custom_post_class', 10, 3);if (!function_exists('hpbk_custom_post_class')):    function hpbk_custom_post_class($classes, $class, $post_id)    {        if (is_single())            $classes[] = 'article-full-content';        else            $classes[] = 'article-summary';        return $classes;    }endif;remove_filter( 'the_content', 'wpautop' );remove_filter( 'the_excerpt', 'wpautop' );